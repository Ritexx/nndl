import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_diabetes, load_breast_cancer
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from keras.models import Sequential
from keras.layers import Dense

# Load and preprocess dataset
def load_data(name):
    if name == "diabetes":
        data = load_diabetes()
    elif name == "cancer":
        data = load_breast_cancer()
    else:
        raise ValueError("Invalid dataset name. Please choose either 'diabetes' or 'cancer'.")
    
    X = StandardScaler().fit_transform(data.data)
    y = data.target
    return X, y

# Dataset input
dataset_name = input("Enter dataset (diabetes, cancer): ").lower()
X, y = load_data(dataset_name)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build and train model
model = Sequential([
    Dense(16, activation='relu', input_dim=X.shape[1]),
    Dense(8, activation='tanh'),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=50, batch_size=8, validation_split=0.1, verbose=1)

# Predictions
y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype(int).flatten()
y_test_classes = y_test.astype(int)

# Evaluation
accuracy = accuracy_score(y_test_classes, y_pred_classes)
conf_matrix = confusion_matrix(y_test_classes, y_pred_classes)
class_report = classification_report(y_test_classes, y_pred_classes)

# Print results
print(f"\nAccuracy: {accuracy:.2f}")
print(f"Confusion Matrix:\n{conf_matrix}")
print(f"Classification Report:\n{class_report}")
